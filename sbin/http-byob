#!/usr/bin/env bash
shopt -s extglob
shopt -s nullglob
unset CDPATH
#set -x
:

Destroy() {
    tput clear
}
trap Destroy SIGINT SIGQUIT
:
X() {
    EXIT="${1:-0}"
    exit "${EXIT}"
}

Msg() {
    [[ "${#1}" -gt 0 ]] && printf '%s\n\n' "${1}" && return

    if [[ $EXIT -eq 0 ]]
    then
        printf '\n\n%s\n' "That went suprisingly well."
    elif [[ $EXIT -eq 1  ]]
    then
        printf '%s\n' "Error"
    elif [[ $EXIT -eq 100 ]]
    then
        :
    elif [[ $EXIT -eq 101 ]]
    then
        printf '%s\n' "Please run this script with sudo."
    elif [[ $EXIT -eq 102 ]]
    then
        printf '%s\n' "Cleanup is complete."
    elif [[ $EXIT -eq 103 ]]
    then
        printf '%s\n' "Logger closed."
    elif [[ $EXIT -eq 104 ]]
    then
        printf '%s\n' "Dnsmasq stopped."
    elif [[ $EXIT -eq 105 ]]
    then
        printf '%s\n' "httpd stopped."
    elif [[ $EXIT -eq 106 ]]
    then
        printf '%s\n' "Logging facility does not exist."
    fi
}
trap Msg EXIT
#################
:
# permission check
gate() {
    [[ $UID != 0 ]] && X 101
}
:
:
:

MASQ()
{
    local pid

    [[ ! -d "/etc/resolver/" ]] && mkdir "/etc/resolver/"


    if [[ ! -f "/etc/resolver/local" ]]
    then
        touch /etc/resolver/local
    else
        printf '%s\n' "nameserver 127.0.0.1" >| /etc/resolver/local
    fi


    [[ ! -x $DNSMASQ ]] && Msg "Dnsmasq not found" && X 1
    :
    if [[ ! -r $DNSMASQ_PID ]]
    then
        while IFS= read -r line; do
            printf '%s\n' "$line" | nc localhost "${DNSMASQ_LOG_PORT}"
        done < <(
            "${DNSMASQ}" \
                --log-queries \
                --stop-dns-rebind \
                --bind-interfaces \
                --user="${HTTPD_USER}" \
                --port "${DNS_PORT}" \
                --local-service \
                --domain="${HOSTNAME}",127.0.0.1/24,local \
                --listen-address=127.0.0.1 \
                --address=/local/127.0.0.1 \
                --log-facility=- \
                --pid-file="${DNSMASQ_PID}" \
                --no-hosts \
                --no-resolv \
                --cache-size=0 \
                --conf-file="${DNSMASQ_CONFIG}" 2>&1
        ) &
        disown %1
        printf '%s\n' $'Starting `dnsmasq`.'
    else
        pid=$(< "${DNSMASQ_PID}")
        Msg "Dnsmasq seems to be running. ($pid)"
        X 100
    fi
}

HTTPD()
{
    local pid
    [[ ! -x $HTTPD ]] && Msg "Apache httpd server not found" && X 1
    :
    if [[ ! -r $HTTPD_PID ]]
    then
        while IFS= read -r line; do
            printf '%s\n' "$line" | nc localhost "${HTTPD_LOG_PORT}"
        done < <(
            "${APACHECTL}" \
                -f "${HTTPD_CONFIG}" \
                -e info \
                -DFOREGROUND \
                -k start 2>&1
        ) &
        disown %1
        printf '%s\n' $'Starting `httpd`. '
    else
        pid=$(< "${HTTPD_PID}")
        Msg "httpd seems to be running. ($pid)"
        X 100
    fi
}


Listen()
{
    case $1 in
        -D|--dns)
            # check if dnsmasq is using that port
            if ! lsof -i tcp:"${DNS_PORT}" | grep dnsmasq >/dev/null 2>&1
            then
                printf '%s' "Waiting for dnsmasq ... "
            fi

            # if it is not using it, wait for it
            (
                while ! lsof -i :"${DNS_PORT}" | grep dnsmasq >/dev/null 2>&1
                do
                    waited='yes'
                    sleep 0.5
                done
                [[ $waited == 'yes' ]] && printf '%s\n\n' "ready."
            ) &
            wait

            Msg 'Logging ... '
            nc -k -l "${DNSMASQ_LOG_PORT}"
            X 103
            ;;
        -H|--access|--httpd)
            # check if port is accessible
            if ! nc -z localhost 80 >/dev/null 2>&1
            then
                printf '%s\n' "Cannot connect to port 80."
                X 1
            fi

            # check if httpd is using that port
            if ! lsof -i :80 | grep httpd >/dev/null 2>&1
            then
                printf '%s' "Waiting for httpd ... "
            fi

            # if it is not using it, wait for it
            (
                while ! lsof -i :80 | grep httpd >/dev/null 2>&1
                do
                    waited='yes'
                    sleep 0.5
                done
                [[ $waited == 'yes' ]] && printf '%s\n\n' "ready."
            ) &
            wait

            Msg 'Logging ... '
            nc -k -l "${HTTPD_LOG_PORT}"
            X 103
            ;;
        *)
            Msg "Accepted flags are -D and -H."
            X 1
            ;;
    esac
}

# Start
Start()
{
    MASQ &
    wait
    HTTPD
}

#
# Stop
Stop()
{
    if [[ $1 == '-H' || "${#1}" -eq 0 ]]
    then
        "${APACHECTL}" -f "${HTTPD_CONFIG}" -k stop > /dev/null 2>&1 & wait
        if [[ -r $HTTPD_PID  ]]; then
            rm "${HTTPD_PID}" >/dev/null 2>&1
            Msg "httpd proccesses stopped."
        else
            Msg "No httpd process found."
        fi
    fi

    if [[ $1 == '-D' || "${#1}" -eq 0 ]]
    then
        pkill -9 -F "${DNSMASQ_PID}" dnsmasq >/dev/null 2>&1 & wait
        if [[ -r "${DNSMASQ_PID}" ]]; then
            rm "${DNSMASQ_PID}" >/dev/null 2>&1
            Msg "dnsmasq proccess stopped."
        else
            Msg "No dnsmasq process found."
        fi
    fi
    killall nc >/dev/null 2>&1
}

Restart()
{
	  "${APACHECTL}" -f "${HTTPD_CONFIG}" -k restart > /dev/null 2>&1
    Stop -D &
    wait
    Start -D

}

Test()
{
    local name
    source "./lib/env"
    for exe in ${exe[@]}; do
        name="$(basename "${exe}")"
        if [[ -x "${exe}" ]]; then
            printf '%-20s found!' "${name}"
            if [[ "${name}" == 'dnsmasq' ]]; then
                printf '\t'
                "${DNSMASQ}" -C "${DNSMASQ_CONFIG}" --test &
                wait
            elif [[  "${name}" == 'apachectl' ]]; then
                printf '\t'
                "${APACHECTL}" -f "${HTTPD_CONFIG}" -t &
                wait
            fi
        else
            printf '%-20s not found!\n' "${name}"
        fi
    done
}


Status() {
    local pid
    tput sgr0 # turn off text attributes
    tput clear # clear stuff away
    ps -o "pid,etime,user,comm" | head -n 1 | column -t

    while IFS= read -r line; do
            tput sc

        [[ -r "${DNSMASQ_PID}" ]] && tmp1=$(< "${DNSMASQ_PID}")
        mapfile -t tmp2 < <(pgrep httpd)
        proc=("${tmp1}" "${tmp2[*]}")

        for pid in ${proc[@]}; do
            command ps -p "${pid}" -o "pid=,etime=,user=,comm=" | column -t 2>&1
            tput el
        done
        sleep 2
        tput ed
        tput rc
    done < <(
        yes
    ) &
    wait
}



http-byob()
{
    case $1 in
        start  )
            gate;
            shift
            case $1 in
                -D|--dnsmasq)
                    MASQ
                    X 0
                    ;;
                -H|--httpd)
                    HTTPD
                    X 0
                    ;;
            esac
            Start
            ;;
        stop   )
            gate
            shift
            Stop "${@}"
            ;;
        restart)
            gate
            Restart
            ;;
        test   )
            gate
            Test
            ;;
        listen|watch)
            shift
            Listen "${@}"
            ;;
        clean  )
            Destroy
            ;;
        status)
            Status
            ;;

        *)
            echo "Unknown option: try 'Start', 'Stop', 'Restart' or 'Test'"
            X 1
            ;;
    esac
}


if [[ ${BASH_SOURCE[0]} != "${0}" ]]; then
    unset -f http-byob
    if [[ "${*}" =~ '--activate' ]]; then
        bash --rcfile <(read -r httpbyob_shell < \
                                  <(printf '%s' "export PS1=\"( BYOB ) ${PS1}\" ;\
                                          alias sudo='sudo ';\
                                          unset PROMPT_COMMAND;\
                                          alias status=\"sbin/http-byob status\";\
                                          alias start=\"sbin/http-byob start \";\
                                          alias stop=\"sbin/http-byob stop \";\
                                          alias restart=\"sbin/http-byob restart \";\
                                          alias test=\"sbin/http-byob test \";\
                                          alias listen=\"sbin/http-byob listen \";\
                                          set +o history;\
                                          ");printf '%s'  "${httpbyob_shell}") -i
        return
    fi
    printf '%s\n' "\`http-byob\` is not meant to be sourced."
    return 1
    :
elif [[ "${BASH_SOURCE[0]}" == 'sbin/http-byob' ]]
then
    cd ./sbin || X 1
    _PWD="$(pwd)"
    source "./lib/env"
    http-byob "${@}"
else
    printf '%s\n' "\`http-byob\` must be invoked from the container root -- \"sbin/http-byob\". Also, avoid using aliases!"
    X 1
fi
