#!/usr/bin/env bash
shopt -s extglob
shopt -s nullglob
unset CDPATH

declare -r BUNDLE_REF="./${BASH_SOURCE%/*}/"

if [[ -z "${BASH_SOURCE}" ]]; then
    printf 'Cannot find executing code source!\n'
    exit 1
fi


cd "${BUNDLE_REF}" || exit
declare -r BUNDLE_ROOT="$(pwd)/.."

#references
# https://github.com/docker-library/php/blob/master/apache2-foreground


#set -x

###### STATE
# declare -i IS_CONTINUING="${IS_CONTINUING:-1}"
# declare -i IS_HELP_MODE=2
######
# colors
declare end=$'\033[0m'
declare red=$'\033[0;31m'
declare yellow=$'\033[0;33m'

###### THE ENVIRONMENT (declarations) ###########
declare -x INSTALL_ROOT
declare -xr HTTPD_USER=$(logname)
###############
# IO
###############
declare -xi DNS_PORT=53
declare -xi HTTPD_PORT=80

declare -xi DNSMASQ_LOG_PORT=9005
declare -xi HTTPD_LOG_PORT=9000

declare -xr HTTPD_VHOST_CUSTOM_LOG=/dev/null
declare -xr HTTPD_VHOST_ERROR_LOG=/dev/null

declare -x LOGROTATE

declare -xr HTTPD_SERVER_NAME="localhost"

declare -xr HOSTNAME="${HOSTNAME}"

declare -x SIGNAL_MASQ=4 # 0=>called, 1=>stop, 2=>restart, 3=>start, 4=>null
declare -x SIGNAL_HTTPD=4

declare -x SIGNAL_MESSAGE=

declare -x HTTPD_CONFIG="${BUNDLE_ROOT}/conf/httpd.conf"

# ########################
# # DIRECTORY STRUCTURE
# ########################
declare -x HTTPD_SERVER_ROOT

declare -x HTTPD_SERVER_LIB_ROOT
declare -x HTTPD_DOCUMENT_ROOT
HTTPD_DOCUMENT_ROOT='./'

#declare -x BOB_ROOT=$(mktemp -dt bob.XXXXXXXXXX)

#declare -xr PID_ROOT=$(mktemp -ut httpbyob.httpd.pid)

declare -xr LOGS_ROOT="${HOME}/.http-byob/logs"
declare -xr PID_ROOT="${HOME}/.http-byob/pids"

declare -xr HTTPD_PID="${PID_ROOT}/httpd.pid"

declare HTTPD
declare APACHECTL

install -d -o $(logname) -m 755 {"${PID_ROOT}","${LOGS_ROOT}"}

########################
# FIND EXECUTABLES
########################
printf 'Verifying that executables are installed ...\n'
printf ' * httpd '
if HTTPD=$(command -v httpd) >/dev/null 2>&1; then
    HTTPD_SERVER_ROOT=$(dirname "$(dirname "${HTTPD}")")
    printf '✓\n'
else
    printf '✗\n'
    exit 1
fi

printf ' * apachectl '
if APACHECTL=$(command -v apachectl) >/dev/null 2>&1; then
    printf '✓\n'
else
    printf '✗\n'
    exit 1
fi

printf 'Determining apache server build location ...\n'
case "$(uname -s)" in

    Darwin)
        #echo 'Mac OS X'
        if [[ "${APACHECTL}" =~ \/opt\/local ]]; then
            HTTPD_SERVER_LIB_ROOT="${HTTPD_SERVER_ROOT}/lib/apache2/modules"
            printf ' * server root: %s (macports build) ' "${HTTPD_SERVER_ROOT}"
            printf '✓\n'
        else
            # macos catalina
            HTTPD_SERVER_LIB_ROOT="${HTTPD_SERVER_ROOT}/libexec/apache2"
            printf ' * server root: %s (native build) ' "${HTTPD_SERVER_ROOT}"
            printf '✓\n'
        fi
        ;;
    Linux)
        echo 'Linux'
        printf '%s\n' "Sorry, not ready for your OS!"
        exit 1
        ;;

    *)
        printf '%s\n' "Sorry, not ready for your OS!"
        exit 1
        ;;
esac


# will only override what is allowed
# source http_byob.cfg >/dev/null 2>&1

declare PHP_VERSION
if ! PHP_VERSION=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") >/dev/null 2>&1; then
    PHP_VERSION=""
    printf 'php version is indeterminate\n\n'
else
    printf 'Using php%s\n\n' "${PHP_VERSION}"
fi

while read -r line; do
    printf '%s %s\n' "$red$line$end" "${!line}"
done < <(compgen -A variable | egrep '^HTTPD|^APACHE|^DNS|^SIGNAL')
printf '\n\n'

_Locate() {
    [[ -f "${1}" ]] && return 0
    return 1
}

_test()
{

    local ERR
    local var

    printf 'Checking availibility of port %s ...\n' "${HTTPD_PORT}"

    printf ' * httpd:%s ' "${HTTPD_PORT}"
    if lsof -n -iTCP:"${HTTPD_PORT}" >/dev/null 2>&1; then
        printf '— in use\n'
        lsof -iTCP:"${HTTPD_PORT}" -sTCP:LISTEN
    else
        printf '— open\n'
    fi

    sleep 1

    "${APACHECTL}" -f "${HTTPD_CONFIG}" -S
printf '\v'
    "${APACHECTL}" -f "${HTTPD_CONFIG}" -t

    printf '\v\v'
    exit 100
}

_HTTPD()
{
    exec "${APACHECTL}" \
        -f "${HTTPD_CONFIG}" \
        -e error \
        -k start
    #        disown %1

    printf '%s\n' $'Starting `httpd`. '
}

_restart()
{
    if _Locate "${HTTPD_PID}"; then
        pkill -HUP -F "${HTTPD_PID}" &
        printf '%s' "Restarting Apache httpd ... "
        wait

        PID="$(<"${HTTPD_PID}")"
        if ps -p "${PID:?}" >/dev/null 2>&1
        then
            printf '%s (%s)\n' "done." "${PID}"
        else
            # test if restart was successful
            printf '%s (%s)\n' "failed." "$?"
        fi
    else
        printf 'The PID file %s was not found! Is Apache server running?\n\n' "${HTTPD_PID}"
    fi

}

_stop() {
    if [[ -r "${HTTPD_PID}" ]]; then
        z=$(<"${HTTPD_PID}")
        pkill -TERM -F "${HTTPD_PID}" >/dev/null 2>&1 &
        printf 'Stopping httpd (%s) ... ' "${z}"
        wait
        printf 'done.\n'
    else
        printf 'No PID file for httpd found.\n\n'
    fi
}

assert_defined_pre() {
    local msg

    printf -v msg "$red This variable must be defined" "${red}" "${end}"
    echo ${HTTPD_SERVER_ROOT:?$msg}
    echo ${HTTPD_SERVER_LIB_ROOT:?$msg}


    echo ${DNS_PORT:?$msg}
    echo ${HTTPD_PORT:?$msg}
    echo ${HTTPD_CONFIG:?$msg}

    echo ${BUNDLE_ROOT:?$msg}

    echo ${HTTPD_PID:?$msg}
}

assert_defined_post() {
    echo ${HTTPD_DOCUMENT_ROOT:?$msg}
}


http-byob() {
    local options=("${@}")
    local opt_next
    local value
    local index=1
    local _index
    local func_reference
    local func_reflection
    for opt in ${options[@]}; do
        :
        value=${options[$index]}
        :
        case "${opt}" in
            test)
                func_pass='test'
                ;;
            start)
                func_pass='HTTPD'
                ;;
            stop)
                func_pass='stop'
                ;;
            restart)
                func_pass='restart'
                ;;
            # -f)
            #     HTTPD_CONFIG="${value:='../conf/httpd.conf'}"
            #     ;;
            -r)
                HTTPD_DOCUMENT_ROOT="${value:=$HTTPD_DOCUMENT_ROOT}"
                ;;
            *)
                ;;
        esac
        index=$(( index + 1 ))
    done

    if [ 0 -eq ${#func_pass} ]
    then
        echo "no command found"
        exit 1
    fi

    if ! assert_defined_pre 2>&1 > /dev/null; then
        exit;
    fi

    "_${func_pass}" "${*}"
}


http-byob "${@}"

# EXAMPLE:
#  $ sbin/http-byob listen -H  # Stream `httpd` logs

# helpmenu
#     shift

#     title listening

#     tput smcup

#     [[ ! "${*}" =~ ^(-D|-H)$ ]] && Msg "Accepted flags are -D and -H." 1
#     case $1 in
#         -D|--dns)
#             nc -k -l 9005
#             wait
#             # check if dnsmasq is using that port
#             #    if ! lsof -n -iTCP:"${DNS_PORT}" | grep dnsmasq >/dev/null 2>&1
#             #             then
#             #                 printf '%s' "Waiting for dnsmasq ... "
#             #             fi

#             # if it is not using it, wait for it
#             (
#                 while ! lsof -n -iTCP:"${DNS_PORT}" | grep dnsmasq >/dev/null 2>&1
#                 do
#                     waited='yes'
#                     sleep 0.5
#                 done
#                 [[ $waited == 'yes' ]] && printf '%s\n\n' "ready."
#             ) &
#             wait

#             Msg 'Logging ... '
#             nc -k -l "${DNSMASQ_LOG_PORT}"
#             Msg "logger closed." 103
#             ;;
#         -H|--access|--httpd)
#             # check if port is accessible
#             if ! nc -z "${HOSTNAME}" 80 >/dev/null 2>&1
#             then
#                 Msg "Cannot connect to port 80." 1
#             fi

#             # check if httpd is using that port
#             if ! lsof -n -iTCP:80 | grep httpd >/dev/null 2>&1
#             then
#                 printf '%s' "Waiting for httpd ... "
#             fi

#             # if it is not using it, wait for it
#             (
#                 while ! lsof -n -iTCP:80 | grep httpd >/dev/null 2>&1
#                 do
#                     waited='yes'
#                     sleep 0.5
#                 done
#                 [[ $waited == 'yes' ]] && printf '%s\n\n' "ready."
#             ) &
#             wait

#             Msg 'Logging ... '
#             nc -k -l "${HTTPD_LOG_PORT}"
#             Msg "Logger closed." 103
#             ;;
#     esac

#     tput rmcup

# }



# _status() {
#     [ "${IS_HELP_MODE}" -eq 0 ] && helpful <<helpmenu
# Dislay the status of various processes.
# helpmenu
#     # require watch
#     local HAS_WATCH=1
#     if ! command -v watch >/dev/null 2>&1; then
#         printf 'The watch program is required for showing status continuously.\n'
#     else
#         HAS_WATCH=0
#     fi
#     echo $HAS_WATCH


#     shift
#     title status


#     local PID

#     ps -o "ppid,pid,etime,user,comm" | head -n 1 | column -t

#     if _Locate "${DNSMASQ_PID}"; then
#         PID=$(<"${DNSMASQ_PID}")
#         # comm= give short and command= gives full command
#         command ps -p "${PID}" -o "comm=" | column -t 2>&1
#     else
#         printf 'The PID file (%s) for dnsmasq was not found!\n\n' "${DNSMASQ_PID}"
#     fi

#     if _Locate "${HTTPD_PID}"; then
#         PID=$(<"${HTTPD_PID}")
#         command ps -p "${PID}" -o "comm=" | column -t 2>&1
#     else
#         printf 'The PID file (%s) for httpd was not found!\n\n' "${HTTPD_PID}"
#     fi
# }

# helpful()
# {
#     read -r -d '' helpStatement
#     printf 'HELP:\n %s\n' "${helpStatement}"
#     exit 0
# }


