#!/usr/bin/env bash
shopt -s extglob
shopt -s nullglob
unset CDPATH
#set -x
:
###### STATE
declare -i IS_INSTALLED=1
declare -i IS_CONTINUING="${IS_CONTINUING:-1}"
######
###### THE ENVIRONMENT (declarations) ###########
declare -x INSTALL_ROOT
declare -x HTTPD_USER

###############
# IO
###############
declare -xi DNS_PORT=53
declare -xi HTTPD_PORT=80

declare -xi DNSMASQ_LOG_PORT=9005
declare -xi HTTPD_LOG_PORT=9000

declare -xr HTTPD_VHOST_CUSTOM_LOG=/dev/null
declare -xr HTTPD_VHOST_ERROR_LOG=/dev/null

declare -xr HTTPD_SERVER_NAME="localhost"

declare -xr HOSTNAME="${HOSTNAME}"

# will only override what is allowed
# source http_byob.cfg >/dev/null 2>&1


declare PHP_VERSION
if ! PHP_VERSION=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") >/dev/null 2>&1; then
    PHP_VERSION=""
    printf 'php version is indeterminate\n\n'
else
    printf 'Using php%s\n\n' "${PHP_VERSION}"
fi
#
########################
# DIRECTORY STRUCTURE
########################
declare -x HTTP_SERVER_ROOT

declare -x HTTPD_ROOT

# Apache says it NOT include trailing slash
declare -x HTTPD_DOCUMENT_ROOT
#
declare -x PHP_ROOT

declare -x PID_ROOT

declare -x CONF_ROOT

declare -x LOGS_ROOT

declare -x DNSMASQ_PID
declare -x HTTPD_PID
:
declare -x DNS_RESOLV
declare -x DNS_HOSTS
:
# Configs
declare -x HTTPD_CONFIG
declare -x DNSMASQ_CONFIG


declare -x PHPRC

declare -A D
export D
D[proc]='dnsmasq'
D[port]="${DNS_PORT}"
D[pid]="${DNSMASQ_PID}"

declare -A H
export H
H[proc]='httpd'
H[port]="${HTTPD_PORT}"
H[pid]="${HTTPD_PID}"


##################################



Clean() {
    [[ $2 == 'help' ]] && helpful <<helpmenu
Clean stuff.
helpmenu
    shift

    if [[ $1 == '-H' || "${#1}" -eq 0 ]]
    then
        if rm "${HTTPD_PID}" >/dev/null 2>&1
        then
            printf '%s\n' "Removed httpd PID file."
        fi
    fi
    #
    if [[ $1 == '-D' || "${#1}" -eq 0 ]]
    then
        if rm "${DNSMASQ_PID}" >/dev/null 2>&1
        then
            printf '%s\n' "Removed dnsmasq PID file."
        fi
    fi
    #
    killall nc >/dev/null 2>&1

    # ipconfig set en1 DHCP &
    #     wait
    printf '%s\n' "Done cleaning."
}
err_report() {
    echo "Error on line $1"
    exit 1
}
trap 'err_report $LINENO' ERR
End() {
    :
    title 'http-byob: bye'
}
trap 'End' EXIT
force_quit() {
    echo 'Something went terribly wrong ... maybe'
    exit 1
}
trap 'force_quit' SIGHUP SIGINT SIGTERM INT
:
_D(){
    dnsmasq \
        --log-queries \
        --log-facility=- \
        --log-async=15 \
        --stop-dns-rebind \
        --bind-interfaces \
        --user="${HTTPD_USER}" \
        --port=53 \
        --local-service \
		    --server=/lan/127.0.0.1 \
        --address=/lan/127.0.0.1 \
        --pid-file="${DNSMASQ_PID}" \
        --cache-size=0 \
        --no-resolv \
        --no-hosts \
        --strict-order \
        --conf-file="${DNSMASQ_CONFIG}" 2>&1
}

title ()
{
    echo -ne "\\033]0;$*\\007"
}
:
Destroy() {
    tput rmcup
    killall nc
    :
    title http-byob
}
trap Destroy SIGINT SIGQUIT
:
Msg() {
    printf '%s\n\n' "${1:-... exiting.}"
    [[ "${#2}" -gt 0 ]] && exit "${2}"
    return 0
}
#################
:
# permission check
gate() {
    [[ $UID -eq 0 ]] || exec sudo IS_CONTINUING=0 "${0}" "${@}"
}


declare HTTPD
declare APACHECTL
declare PHP
declare DNSMASQ
isInstalled() {
    [ "${IS_INSTALLED}" -eq 0 ] && return 0
    ########################
    # FIND EXECUTABLES
    ########################
    if HTTPD=$(command -v httpd) >/dev/null 2>&1; then
        HTTP_SERVER_ROOT=$(dirname "$(dirname "${HTTPD}")")
        printf 'Found httpd here: %s\n\n' "${HTTPD}"
    else
        printf 'Apache httpd not found!\n\n'
        exit 1
    fi


    if APACHECTL=$(command -v apachectl) >/dev/null 2>&1; then
        printf 'Found apachectl here: %s\n\n' "${APACHECTL}"
    else
        printf 'apachectl httpd not found!\n\n'
        exit 2
    fi

    if PHP=$(command -v php) >/dev/null 2>&1; then
        printf 'Found httpd here: %s\n\n' "${PHP}"
    else
        printf 'php not found!\n\n'
        exit 3
    fi

    if DNSMASQ=$(command -v dnsmasq) >/dev/null 2>&1; then
        printf 'Found dnsmasq here: %s\n\n' "${DNSMASQ}"
    else
        printf 'DNSMASQ not found!\n\n'
        exit 4
    fi
    IS_INSTALLED=0
}
:
check() {
    isValid "${1}"
    :
    local pid
    :
    local Q; Q="${1#\-}"
    local pid_file_ref; pid_file_ref="$Q[pid]"

    if [[ ! -r "${!pid_file_ref}" ]]
    then
        printf '%s\n' "PID file not found!"
        return 1
    else
        pid=$(<"${!pid_file_ref}")
        if ! ps -p "${pid}" >/dev/null 2>&1
        then
            printf 'The PID file indicates %s; however, no such process exists.\n' "\`${pid}\`"
            return 1
        else
            printf 'The PID file exists and corresponds to a valid process (%s)\n' "${pid}"
            title existing process
            return 0
        fi
    fi
    return 1
}
:
isValid()
{
    [[ ! "${*}" =~ ^(-D|-H|^$)$ ]] && Msg "Accepted flags are -D and -H." 1
    return 0
}
title()
{
    echo -ne "\033]0;"$*"\007"
}
:
MASQ()
{
    #    echoipdns lan
    #   return
    # maybe use a virtual file resolver?

    # Note: dnsmasq is configured NOT to read config file
    local pid

    local resolvFile; resolvFile="/etc/resolver/lan"

    [[ ! -d "/etc/resolver/" ]] && mkdir "/etc/resolver/"

    [[ ! -f "${resolvFile}" ]] && touch "${resolvFile}"
	  printf '%s\n' "nameserver 127.0.0.1" >| "${resolvFile}"


    title launching dnsmasq
    _D
    # while IFS= read -r line; do
    #     printf '%s\n' "$line" | nc "${HOSTNAME}" "${DNSMASQ_LOG_PORT}"
    # done < <(
    #     _D
    # )
    # #&
    # #disown %1
    printf '%s\n' $'Starting `dnsmasq`.'n
}
#
_HTTPD()
{
    local pid
    :
    # while IFS= read -r line; do
    #     printf '%s\n' "$line" | nc "${HOSTNAME}" "${HTTPD_LOG_PORT}"
    # done < <(
    #     "${APACHECTL}" \
        #         -f "${HTTPD_CONFIG}" \
        #         -e info \
        #         -DFOREGROUND \
        #         -k start 2>&1
    # ) &
    "${APACHECTL}" \
        -f "${HTTPD_CONFIG}" \
        -e debug \
        -k start
    #        disown %1

    printf '%s\n' $'Starting `httpd`. '

}


Listen()
{
    [[ $2 == 'help' ]] && helpful <<'helpmenu'
Stream netcat logs.

EXAMPLE:
 $ sbin/http-byob listen -H  # Stream `httpd` logs

helpmenu
    shift

    title listening

    tput smcup

    [[ ! "${*}" =~ ^(-D|-H)$ ]] && Msg "Accepted flags are -D and -H." 1
    case $1 in
        -D|--dns)
            nc -k -l 9005
            wait
            # check if dnsmasq is using that port
            #    if ! lsof -n -iTCP:"${DNS_PORT}" | grep dnsmasq >/dev/null 2>&1
            #             then
            #                 printf '%s' "Waiting for dnsmasq ... "
            #             fi

            # if it is not using it, wait for it
            (
                while ! lsof -n -iTCP:"${DNS_PORT}" | grep dnsmasq >/dev/null 2>&1
                do
                    waited='yes'
                    sleep 0.5
                done
                [[ $waited == 'yes' ]] && printf '%s\n\n' "ready."
            ) &
            wait

            Msg 'Logging ... '
            nc -k -l "${DNSMASQ_LOG_PORT}"
            Msg "logger closed." 103
            ;;
        -H|--access|--httpd)
            # check if port is accessible
            if ! nc -z "${HOSTNAME}" 80 >/dev/null 2>&1
            then
                Msg "Cannot connect to port 80." 1
            fi

            # check if httpd is using that port
            if ! lsof -n -iTCP:80 | grep httpd >/dev/null 2>&1
            then
                printf '%s' "Waiting for httpd ... "
            fi

            # if it is not using it, wait for it
            (
                while ! lsof -n -iTCP:80 | grep httpd >/dev/null 2>&1
                do
                    waited='yes'
                    sleep 0.5
                done
                [[ $waited == 'yes' ]] && printf '%s\n\n' "ready."
            ) &
            wait

            Msg 'Logging ... '
            nc -k -l "${HTTPD_LOG_PORT}"
            Msg "Logger closed." 103
            ;;
    esac

    tput rmcup

}

Env() {
    local _HTTPD_ROOT
    # define and update values here
    if [ "${#INSTALL_ROOT}" -gt 0 ]; then
        HTTPD_ROOT="${INSTALL_ROOT}/HTTP_BYOB"
    elif [[ $(basename "${HTTPD_ROOT}") == 'HTTP_BYOB' ]]; then
        :
        echo shit
    elif [ "${#HTTPD_ROOT}" -gt 0 ]; then
        HTTPD_ROOT="${HTTPD_ROOT}/HTTP_BYOB"
    else
        _HTTPD_ROOT="$PWD/HTTP_BYOB"
    fi

    HTTPD_USER=$(logname)

    HTTPD_ROOT="${HTTPD_ROOT:-${_HTTPD_ROOT:?}}"

    HTTPD_ROOT=$(perl -MCwd -e 'print Cwd::abs_path shift' "${HTTPD_ROOT}")

    HTTPD_DOCUMENT_ROOT="${HTTPD_ROOT}/www"

    VHOST_ROOT="${HTTPD_ROOT}/vhosts.d"

    PHP_ROOT="${HTTPD_ROOT}/etc/PHP${PHP_VERSION}/"

    PID_ROOT="${HTTPD_ROOT}/var/run"

    CONF_ROOT="${HTTPD_ROOT}/conf"

    LOGS_ROOT="${HTTPD_ROOT}/logs"

    DNSMASQ_PID="${PID_ROOT}/dnsmasq.pid"

    HTTPD_PID="${PID_ROOT}/httpd.pid"

    DNS_RESOLV="${HTTPD_ROOT}/etc/resolv.conf"

    DNS_HOSTS="${HTTPD_ROOT}/etc/hosts"

    HTTPD_CONFIG="${CONF_ROOT}/httpd.conf"

    DNSMASQ_CONFIG="${CONF_ROOT}/dnsmasq.conf"

    PHPRC="${PHP_ROOT}/php.ini"

}

checkRoot() {
    :
}

# Start
Start()
{
    [ "${IS_CONTINUING}" -eq 0 ] && printf 'Continuing ... \n\n'

    [[ $2 == 'help' ]] && helpful <<helpmenu
Start processes.

EXAMPLE:
 $ sbin/http-byob start     # launch \`dnsmasq\` and \`httpd\`
 $ sbin/http-body start -H  # launch \`httpd\`
helpmenu

    if [ "${IS_CONTINUING}" -ne 0 ]; then
        if [[ -d "${HTTPD_ROOT}" ]]; then
            echo "Ready to start. Continue?"
            select yn in "Yes" "No"; do
                case $yn in
                    Yes ) break;;
                    No ) exit 66;;
                esac
            done
            printf 'Starting ...\n\n'
        else
            printf 'No container found. Aborting.\n\n'
            exit 1
        fi
    fi

    IS_CONTINUING=0
    gate "${@}"; shift
    MASQ
    _HTTPD
}

#
# Stop
Stop()
{
    [ "${IS_CONTINUING}" -eq 0 ] && printf 'Continuing ... \n\n'
    :
    [[ $2 == 'help' ]] && helpful <<'helpmenu'
Stop processes.

EXAMPLE:
 $ sbin/http-byob stop -D  # Stop `dnsmasq`
 $ sbin/http-byob stop -H  # Stop `httpd`
helpmenu

    if [ "${IS_CONTINUING}" -ne 0 ]; then
        if [[ -d "${HTTPD_ROOT}" ]]; then
            echo "Ready to stop. Continue?"
            select yn in "Yes" "No"; do
                case $yn in
                    Yes ) break;;
                    No ) exit 66;;
                esac
            done
            printf 'Stopping ...\n\n'
        else
            printf 'No container found. Aborting.\n\n'
            exit 1
        fi
    fi

    IS_CONTINUING=0
    gate "${@}"; shift


    if [[ -r "${DNSMASQ_PID}" ]]; then
        z=$(<"${DNSMASQ_PID}")
        pkill -TERM -F "${DNSMASQ_PID}" >/dev/null 2>&1 &
        printf 'Stopping dnsmasq (%s) ... ' "${z}"
        wait
        printf 'done.\n'
    else
        printf 'No PID file for dnsmasq found.\n\n'
    fi

    if [[ -r "${HTTPD_PID}" ]]; then
        z=$(<"${HTTPD_PID}")
        pkill -TERM -F "${HTTPD_PID}" >/dev/null 2>&1 &
        printf 'Stopping httpd (%s) ... ' "${z}"
        wait
        printf 'done.\n'
    else
        printf 'No PID file for httpd found.\n\n'
    fi

    printf 'Completely shutdown.\n\n'
}

_Locate() {
    [[ -f "${1}" ]] && return 0
    return 1
}

Restart()
{
    [[ $2 == 'help' ]] && helpful <<helpmenu
Restart processes.
helpmenu

    gate "${@}"; shift

    if _Locate "${HTTPD_PID}"; then
        pkill -HUP -F "${HTTPD_PID}" &
        printf '%s' "Restarting Apache httpd ... "
        wait

        PID="$(<"${HTTPD_PID}")"
        if ps -p "${PID:?}" >/dev/null 2>&1
        then
            printf '%s (%s)\n' "done." "${PID}"
        else
            # test if restart was successful
            printf '%s (%s)\n' "failed." "$?"
        fi
    else
        printf 'The PID file %s was not found! Unable to restart!\n\n' "${HTTPD_PID}"
    fi
    # if [[ ! -r "${DNSMASQ_PID}" ]]; then
    #     Msg "No dnsmasq process found."
    # else
    #     z=$(<"${DNSMASQ_PID}")
    #     pkill -TERM -F "${DNSMASQ_PID}" >/dev/null 2>&1 &
    #     printf 'Stopping dnsmasq (%s) ... ' "${z}"
    #     wait
    #     printf 'done.\n'
    # fi


}

Test()
{
    [ "${IS_CONTINUING}" -eq 0 ] && printf 'Continuing ... \n\n'

    [[ $2 == 'help' ]] && helpful <<helpmenu
Test that configuration files are syntactically correct.
helpmenu

    if [ "${IS_CONTINUING}" -ne 0 ]; then
        if [[ -d "${HTTPD_ROOT}" ]]; then
            echo "Ready to test. Continue?"
            select yn in "Yes" "No"; do
                case $yn in
                    Yes ) break;;
                    No ) exit 66;;
                esac
            done
            printf 'Testing ...\n\n'
        else
            printf 'No container found. Aborting.\n\n'
            exit 1
        fi
    fi


    IS_CONTINUING=0
    gate "${@}"; shift

    local ERR
    local var

    title Testing ...

    #  if lsof -n -iTCP:"${HTTPD_PORT}" | awk '{print $1,$3}' | column -t
    #     then
    #         printf 'Port %s is occupied.\n' "${HTTPD_PORT}"
    #     fi
    #     printf '\v\v'

    # alias list
    # printf '%s\n' "Server alias list:"
    # while IFS='' read -r line; do
    #     if [[ $line =~ alias*(.+) ]]; then
    #         printf '%s\n' "${BASH_REMATCH[1]}"
    #     fi
    # done < <("${APACHECTL}" -f "${HTTPD_CONFIG}" -S)
    "${APACHECTL}" -f "${HTTPD_CONFIG}" -S

    printf '\v\v'


    [[ -z $DNSMASQ ]] && Msg 'dnsmasq not found!' 1
    [[ ! -x $DNSMASQ ]] && Msg "Dnsmasq not found" 1
    "${DNSMASQ}" -C "${DNSMASQ_CONFIG}" --test &
    wait
    printf '\v\v'

    exit
    printf 'Now testing variables ... \n\n'
    for var in DNS_PORT HTTPD_PORT DNSMASQ_LOG_PORT HTTPD_LOG_PORT;
    do
        if [[ ${!var} -eq 0 ]];then
            ERR='ERR'
        else
            ERR=''
        fi
        printf '%-30s%s\n' "${var}:${!var}" "${ERR:+ERR!}"
    done
    #         printf 'DNS_PORT
    #     [[ $HTTPD_PORT -eq 0 ]] && Msg "HTTPD_PORT not properly defined! $HTTPD_PORT"

}


Status() {
    [[ $2 == 'help' ]] && helpful <<helpmenu
Dislay the status of various processes.
helpmenu
    shift
    title status


    local pid

    tput smcup

    tput sgr0 # turn off text attributes
    ps -o "ppid,pid,etime,user,comm" | head -n 1 | column -t

    while IFS= read -r line; do
        tput sc

        [[ -r "${DNSMASQ_PID}" ]] && tmp1=$(< "${DNSMASQ_PID}")
        mapfile -t tmp2 < <(pgrep httpd)
        proc=("${tmp1}" "${tmp2[*]}")

        for pid in ${proc[@]}; do
            command ps -p "${pid}" -o "ppid=,pid=,etime=,user=,comm=" | column -t 2>&1
            tput el
        done
        sleep 2
        tput ed
        tput rc
    done < <(
        yes
    ) &
    wait

    tput rmcup
}


helpful()
{
    read -r -d '' helpStatement
    printf 'HELP:\n %s\n' "${helpStatement}"
    exit 0
}


FetchConfigs() {
    local UA='PaxPerScientiam HTTP-BYOB (Pseudo MAMP container maker) '
    local HEADER_1='Accept: application/vnd.github.v3.raw'
    local ROOT="${1:?}"
    local URL_BASE='https://api.github.com/repos/paxperscientiam/http-byob/contents/'
    local QUERY='?ref=develop'
    local FILES=(
        "www/home/fallback.php"
        "readme.md"
        "conf/httpd.conf"
        "conf/extra/httpd-autoindex.conf"
        "conf/extra/httpd-vhosts.conf"
        "conf/extra/mod_php73.conf"
        "conf/dnsmasq.conf"
        "etc/resolv.conf"
        "vhosts.d/all.conf"
    )

    printf 'Fetching and writing to %s ... \n' "${ROOT}"
    while IFS='' read -r remote_file; do
        printf '  %s ... ' "${remote_file}"
        # don't redownload unncessarily
        [[ -f "${ROOT}/${remote_file}" ]] && printf 'done (unchanged).\n' && continue
        (curl -A "${UA}" -H "${HEADER_1}" "${URL_BASE}/${remote_file}${QUERY}" >| \
             "${ROOT}/${remote_file}" 2>/dev/null ) &
        wait
        printf 'done.\n'
    done < <(printf '%s\n' "${FILES[@]}")
}
:
Build() {
    INSTALL_ROOT="${INSTALL_ROOT:?}"
    if [[ ! -d "${INSTALL_ROOT}" ]]; then
        printf 'The install root %s does not exist\n\n' "${INSTALL_ROOT}"
        exit 1
    fi

    if [[ ! -w "${INSTALL_ROOT}" ]]; then
        printf 'The user `%s` does not have permission to scaffold within the directory `%s`. Please try another.\n\n' "${USER}" "${INSTALL_ROOT}"
        exit 1
    fi

    HTTPD_ROOT="${INSTALL_ROOT}/HTTP_BYOB"

    if [[ ! -d "${HTTPD_ROOT}" ]]; then
        echo "Ready to scafffold. Continue?"
        select yn in "Yes" "No"; do
            case $yn in
                Yes ) break;;
                No ) exit 66;;
            esac
        done
        printf 'Scaffolding ...\n\n'
    else
        printf 'Build exists already. Continue?\n'
        select yn in "Yes" "No"; do
            case $yn in
                Yes ) break;;
                No ) echo "Aborting"; exit 66;;
            esac
        done
    fi

    if ! mkdir -p "${HTTPD_DOCUMENT_ROOT}"; then
        exit $?
    fi

    mkdir -p {"${PID_ROOT}","${CONF_ROOT}","${CONF_ROOT}/extra","${PHP_ROOT}","${LOGS_ROOT}","${VHOST_ROOT}"}

    FetchConfigs "${HTTPD_ROOT}"

    exit 77
    return 0
}

entry(){
    [[ ! "${1}" == 'Test' ]] && http-byob "${@}"
}

http-byob()
{
    case $1 in
        build)
            INSTALL_ROOT="${2}"
            Env
            Build "${@}"
            ;;
        start)
            HTTPD_ROOT="${2}"
            Env
            Start "${@}"
            ;;
        stop)
            HTTPD_ROOT="${2}"
            Env
            Stop "${@}"
            ;;
        restart)
            HTTPD_ROOT="${2}"
            Env
            Restart "${@}"
            ;;
        test)
            HTTPD_ROOT="${2}"
            Env
            Test "${@}"
            ;;
        listen|watch)
            Listen "${@}"
            ;;
        clean)
            Stop "${@}"
            Clean "${@}"
            ;;
        status)
            Status "${@}"
            ;;
        check)
            shift
            check "${1}"
            ;;
        help)
            shift
            [[ "${#1}" -eq 0 ]] && exit
            eval sbin/http-byob "${1}" help
            ;;
        alien)
            compgen -A function ;exit
            check -H
            echo $?
            exit
            ;;
        __)
            __
            ;;
        *)
            Msg "Unknown option: try 'start', 'stop', 'restart', 'test', 'listen', 'clean', 'help'" 1
            ;;
    esac
}


# DEFAULTS
DNS_PORT="${DNS_PORT:=53}"
HTTPD_USER="${HTTPD_USER:=$USER}"

# if [ "${IS_CONTINUING}" -ne 0 ]; then
#     echo shit
if ! isInstalled ;then
    printf 'Something is missing!\n\n'
    exit 1
fi
#fi

entry "${@}"
