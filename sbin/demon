#!/usr/bin/env bash
shopt -s extglob
shopt -s nullglob
#set -x
:
Destroy() {
    if [[ $STATE == "CLEAN" ]]
    then
        # exec 3>&-
        # exec 4>&-
        # exec 5>&-
        # exec 6>&-
        # exec 7>&-
        # exec 8>&-
        # exec 9>&-
        for fifo in "${LOG_ROOT}"{/*,*/*/*}
        do
            [[ -p $fifo ]] && rm "${fifo}"
        done
        X 102
    fi


    [[ $STATE == 'LISTEN' ]] && \
        X 103
}
trap Destroy SIGINT SIGQUIT
:
X() {
    EXIT="${1:-0}"
    exit "${EXIT}"
}
Msg() {
    [[ "${#1}" -gt 0 ]] && printf '%s\n\n' "${1}" && return

    if [[ $EXIT -eq 0 ]]
    then
        printf '%s\n' "That went suprisingly well."
    elif [[ $EXIT -eq 1  ]]
    then
        printf '%s\n' "Error"
    elif [[ $EXIT -eq 100 ]]
    then
        :
    elif [[ $EXIT -eq 101 ]]
    then
        printf '%s\n' "Please run this script with sudo."
    elif [[ $EXIT -eq 102 ]]
    then
        printf '%s\n' "Cleanup is complete."
    elif [[ $EXIT -eq 103 ]]
    then
        printf '%s\n' "Logger closed."
    elif [[ $EXIT -eq 104 ]]
    then
        printf '%s\n' "Dnsmasq stopped."
    elif [[ $EXIT -eq 105 ]]
    then
        printf '%s\n' "httpd stopped."
    fi
}
trap Msg EXIT
########################
# Executables
HTTPD="/opt/local/sbin/httpd"
DNSMASQ="/opt/local/sbin/dnsmasq"
APACHECTL="/opt/local/sbin/apachectl"
eval exe=("${HTTPD} ${APACHECTL} ${DNSMASQ}")
#################
:
# permission check
gate() {
    [[ $UID != 0 ]] && X 101
}
:
:
get_cwd() {
    SOURCE="${BASH_SOURCE[-1]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    _CWD="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    :
}
get_cwd

check() {
    [[ "${#_CWD}" -eq 0 ]] && printf "The CWD must be defined.\\n"
    local file; file="${1}"
    [[ ${#1} -eq 0 ]] && return 2
    # pathchk could come in handy
    [[ -r $_CWD/$file ]] && return 0
    return 1
}
:
source "${_CWD}/lib/env"
source "${_CWD}/lib/logger"
# before starting, make sure dnsmasq already running

MASQ()
{
    [[ ! -x $DNSMASQ ]] && Msg "Dnsmasq not found" && X 1
    :
    if [[ ! -r $DNSMASQ_PID ]]
    then
        "${DNSMASQ}" \
            --log-queries \
            --listen-address=127.0.0.1 \
            --log-facility="${DNSMASQ_LOG}" \
            --conf-file="${DNSMASQ_CONFIG}"  \
            --pid-file="${DNSMASQ_PID}" \
            --resolv-file="${DNS_RESOLV}" \
            --no-hosts \
            --cache-size=0 \
            >/dev/null 2>&1 &
        printf '%s' $'Starting `dnsmasq` ... '
        wait
        printf '%s\n' "done."
    else
        read -r pid < "${DNSMASQ_PID}"
        Msg "Dnsmasq seems to be running. ($pid)"
        X 100
    fi
}

HTTPD()
{
    [[ ! -x $HTTPD ]] && Msg "Apache httpd server not found" && X 1
    :
    if [[ ! -r $HTTPD_PID ]]
    then
        :
        "${HTTPD}" -k start -f "${HTTPD_CONFIG}" &
        printf '%s' $'Starting `httpd` ... '
        wait
        printf '%s\n' "done."
    else
        read -r pid < "${HTTPD_PID}"
        Msg "httpd seems to be running. ($pid)"
        X 100
    fi
}


Listen()
{
    STATE="LISTEN"
    case $1 in
        -D|--dns)
            cat "${DNSMASQ_LOG}"
            ;;
        -H|--access|--httpd)
            cat "${HTTPD_CUSTOM_LOG}"
            ;;
        *)
            Msg "Unknown log."
            X 1
            ;;
    esac
}

# Start
Start()
{
    MASQ &
    wait
    HTTPD &
    wait
}

#
# Stop
#
Stop()
{
    if [[ $1 == '-H' || "${#1}" -eq 0 ]]
    then
        "${APACHECTL}" -f "${HTTPD_CONFIG}" -k stop > /dev/null 2>&1 & wait
        if [[ -r $HTTPD_PID  ]]; then
            rm "${HTTPD_PID}" >/dev/null 2>&1
        else
            Msg "No httpd process found."
        fi
    fi

    if [[ $1 == '-D' || "${#1}" -eq 0 ]]
    then
        pkill -9 -F "${DNSMASQ_PID}" dnsmasq >/dev/null 2>&1 & wait
        if [[ -r "${DNSMASQ_PID}" ]]; then
            rm "${DNSMASQ_PID}" >/dev/null 2>&1
        else
            Msg "No dnsmasq process found."
        fi
    fi

        Destroy
}

Restart()
{
	  "${APACHECTL}" -f "${HTTPD_CONFIG}" -k restart > /dev/null 2>&1
}

Test()
{
    printf '%s\n' "${exe[@]}"

    printf '%s\n' "${HTTPD_ROOT}"

    "${DNSMASQ}" -C "${DNSMASQ_CONFIG}" --test &
    wait
    "${APACHECTL}" -f "${HTTPD_CONFIG}" -t
    #-D DUMP_VHOSTS #| column -t

    printf '%s\n' "Now listening ..."  >&3

    X 0
}

Status() {
    local args

    [[ -r "${DNSMASQ_PID}" ]] && read -r tmp1 < "${DNSMASQ_PID}"
    mapfile -t tmp2 < <(pgrep httpd)

    proc=($tmp1 ${tmp2[*]})
    printf -v args '%s' "${proc[@]/#/ \-pid }"
    \top -u -s 2 -stats command,pid,pgrp,ppid,uid $args
}

Run()
{
    case $1 in
        start  )
            gate;
            shift
            case $1 in
                -D|--dnsmasq)
                    MASQ
                    X 0
                    ;;
                -H|--httpd)
                    HTTPD
                    X 0
                    ;;
            esac
            Start
            ;;
        stop   )
            gate
            shift
            Stop "${@}"
            ;;
        restart)
            gate
            Restart
            ;;
        test   )
            gate
            Test
            ;;
        listen|watch)
            shift
            Listen "${@}"
            ;;
        clean  )
            STATE=CLEAN
            gate
            Destroy
            ;;
        status)
            Status
            ;;
        *      )
            echo "Unknown option: try 'Start', 'Stop', 'Restart' or 'Test'"
            X 1
            ;;
    esac
}

# Initiate logging.
Logger
#
Run "${@}"
